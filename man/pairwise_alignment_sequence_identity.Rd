% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pairwise_alignment.R
\name{pairwise_alignment_sequence_identity}
\alias{pairwise_alignment_sequence_identity}
\title{Calculate the percentage of pairwise sequence identity}
\usage{
pairwise_alignment_sequence_identity(
  seqs,
  aln_type = "global",
  pid_type = "PID1"
)
}
\arguments{
\item{seqs}{A named character vector to convert into a
\code{Biostrings::AAStringSet} or a \code{Biostrings::AAStringSet} with the
sequences of interest. If they are not named, arbitrary names
will be given.}

\item{aln_type}{A character vector of one containing the alignment type.
Possible options are "global" (Needleman-Wunsch),"local" (Smith-Waterman)
and "overlap".}

\item{pid_type}{A character vector of one containing the definition
of percent sequence identity. Possible options are
"PID1", "PID2", "PID3" and "PID4".}
}
\value{
A long DataFrame with the results.
}
\description{
Calculate the percentage of pairwise sequence identity
}
\section{Alignment types}{

\itemize{
\item \code{global}: align whole strings with end gap
penalties (Needleman-Wunsch).
\item \code{local}: align string fragments (Smith-Waterman).
\item \code{overlap}: align whole strings without end gap penalties.
}
}

\section{Percent sequence identity}{

\itemize{
\item \code{PID1}: 100 * (identical positions) / (aligned positions + internal
gap positions).
\item \code{PID2}: 100 * (identical positions) / (aligned positions).
\item \code{PID3}: 100 * (identical positions) / (length shorter sequence).
\item \code{PID4}: 100 * (identical positions) / (average length of the two
sequences).
}
}

\examples{
data(phmmer_2abl)
pairwise_alignment_sequence_identity(
    seqs = phmmer_2abl$hits.fullfasta[6:10],
    aln_type = "overlap",
    pid_type = "PID2"
)

}
